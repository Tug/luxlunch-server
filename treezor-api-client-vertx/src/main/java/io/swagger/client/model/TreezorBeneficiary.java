/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TreezorBeneficiariesSddB2bWhitelist;
import java.util.ArrayList;
import java.util.List;

/**
 * TreezorBeneficiary
 */

public class TreezorBeneficiary {
  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("userId")
  private Integer userId = null;

  @JsonProperty("nickName")
  private String nickName = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("address")
  private String address = null;

  @JsonProperty("iban")
  private String iban = null;

  @JsonProperty("bic")
  private String bic = null;

  @JsonProperty("sepaCreditorIdentifier")
  private String sepaCreditorIdentifier = null;

  @JsonProperty("sddB2bWhitelist")
  private List<TreezorBeneficiariesSddB2bWhitelist> sddB2bWhitelist = null;

  @JsonProperty("sddCoreBlacklist")
  private List<String> sddCoreBlacklist = null;

  @JsonProperty("usableForSct")
  private Boolean usableForSct = false;

  @JsonProperty("sddCoreKnownUniqueMandateReference")
  private List<String> sddCoreKnownUniqueMandateReference = null;

  public TreezorBeneficiary tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Custom data that could be used by caller to search the instance.
   * @return tag
  **/
  @ApiModelProperty(value = "Custom data that could be used by caller to search the instance.")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public TreezorBeneficiary userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Beneficiary&#39;s userId
   * @return userId
  **/
  @ApiModelProperty(value = "Beneficiary's userId")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public TreezorBeneficiary nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

   /**
   * Name choosen by end user to easily recognize the beneficiary.
   * @return nickName
  **/
  @ApiModelProperty(value = "Name choosen by end user to easily recognize the beneficiary.")
  public String getNickName() {
    return nickName;
  }

  public void setNickName(String nickName) {
    this.nickName = nickName;
  }

  public TreezorBeneficiary name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Beneficiary name, linked to bank account.
   * @return name
  **/
  @ApiModelProperty(value = "Beneficiary name, linked to bank account.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TreezorBeneficiary address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Beneficiary address, linked to bank account.
   * @return address
  **/
  @ApiModelProperty(value = "Beneficiary address, linked to bank account.")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public TreezorBeneficiary iban(String iban) {
    this.iban = iban;
    return this;
  }

   /**
   * Beneficiary International Bank Account Number.
   * @return iban
  **/
  @ApiModelProperty(value = "Beneficiary International Bank Account Number.")
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public TreezorBeneficiary bic(String bic) {
    this.bic = bic;
    return this;
  }

   /**
   * Beneficiary Bank Identifier Code.
   * @return bic
  **/
  @ApiModelProperty(value = "Beneficiary Bank Identifier Code.")
  public String getBic() {
    return bic;
  }

  public void setBic(String bic) {
    this.bic = bic;
  }

  public TreezorBeneficiary sepaCreditorIdentifier(String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
    return this;
  }

   /**
   * Beneficiary SEPA Creditor Identifier. Mandatory to validate B2B incoming direct debit, useless other wise. Between 8 and 35 caracters.
   * @return sepaCreditorIdentifier
  **/
  @ApiModelProperty(value = "Beneficiary SEPA Creditor Identifier. Mandatory to validate B2B incoming direct debit, useless other wise. Between 8 and 35 caracters.")
  public String getSepaCreditorIdentifier() {
    return sepaCreditorIdentifier;
  }

  public void setSepaCreditorIdentifier(String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
  }

  public TreezorBeneficiary sddB2bWhitelist(List<TreezorBeneficiariesSddB2bWhitelist> sddB2bWhitelist) {
    this.sddB2bWhitelist = sddB2bWhitelist;
    return this;
  }

  public TreezorBeneficiary addSddB2bWhitelistItem(TreezorBeneficiariesSddB2bWhitelist sddB2bWhitelistItem) {
    if (this.sddB2bWhitelist == null) {
      this.sddB2bWhitelist = new ArrayList<>();
    }
    this.sddB2bWhitelist.add(sddB2bWhitelistItem);
    return this;
  }

   /**
   * Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list.
   * @return sddB2bWhitelist
  **/
  @ApiModelProperty(value = "Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list.")
  public List<TreezorBeneficiariesSddB2bWhitelist> getSddB2bWhitelist() {
    return sddB2bWhitelist;
  }

  public void setSddB2bWhitelist(List<TreezorBeneficiariesSddB2bWhitelist> sddB2bWhitelist) {
    this.sddB2bWhitelist = sddB2bWhitelist;
  }

  public TreezorBeneficiary sddCoreBlacklist(List<String> sddCoreBlacklist) {
    this.sddCoreBlacklist = sddCoreBlacklist;
    return this;
  }

  public TreezorBeneficiary addSddCoreBlacklistItem(String sddCoreBlacklistItem) {
    if (this.sddCoreBlacklist == null) {
      this.sddCoreBlacklist = new ArrayList<>();
    }
    this.sddCoreBlacklist.add(sddCoreBlacklistItem);
    return this;
  }

   /**
   * Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, it has to be added to this list. If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused.
   * @return sddCoreBlacklist
  **/
  @ApiModelProperty(value = "Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, it has to be added to this list. If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused.")
  public List<String> getSddCoreBlacklist() {
    return sddCoreBlacklist;
  }

  public void setSddCoreBlacklist(List<String> sddCoreBlacklist) {
    this.sddCoreBlacklist = sddCoreBlacklist;
  }

  public TreezorBeneficiary usableForSct(Boolean usableForSct) {
    this.usableForSct = usableForSct;
    return this;
  }

   /**
   * Indicated if the beneficiary can be used for SEPA Credit Transfer. This field is a conveniant way to filter all beneficiaries for a user that would like to do a Credit Transfer. Indeed, beneficaries are created automatically when receiving a Core Direct Debit and therefor by looking at the list you won&#39;t be able to idnetify which beneficary to use on SCT.
   * @return usableForSct
  **/
  @ApiModelProperty(value = "Indicated if the beneficiary can be used for SEPA Credit Transfer. This field is a conveniant way to filter all beneficiaries for a user that would like to do a Credit Transfer. Indeed, beneficaries are created automatically when receiving a Core Direct Debit and therefor by looking at the list you won't be able to idnetify which beneficary to use on SCT.")
  public Boolean isUsableForSct() {
    return usableForSct;
  }

  public void setUsableForSct(Boolean usableForSct) {
    this.usableForSct = usableForSct;
  }

  public TreezorBeneficiary sddCoreKnownUniqueMandateReference(List<String> sddCoreKnownUniqueMandateReference) {
    this.sddCoreKnownUniqueMandateReference = sddCoreKnownUniqueMandateReference;
    return this;
  }

  public TreezorBeneficiary addSddCoreKnownUniqueMandateReferenceItem(String sddCoreKnownUniqueMandateReferenceItem) {
    if (this.sddCoreKnownUniqueMandateReference == null) {
      this.sddCoreKnownUniqueMandateReference = new ArrayList<>();
    }
    this.sddCoreKnownUniqueMandateReference.add(sddCoreKnownUniqueMandateReferenceItem);
    return this;
  }

   /**
   * Get sddCoreKnownUniqueMandateReference
   * @return sddCoreKnownUniqueMandateReference
  **/
  @ApiModelProperty(value = "")
  public List<String> getSddCoreKnownUniqueMandateReference() {
    return sddCoreKnownUniqueMandateReference;
  }

  public void setSddCoreKnownUniqueMandateReference(List<String> sddCoreKnownUniqueMandateReference) {
    this.sddCoreKnownUniqueMandateReference = sddCoreKnownUniqueMandateReference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreezorBeneficiary beneficiary = (TreezorBeneficiary) o;
    return Objects.equals(this.tag, beneficiary.tag) &&
        Objects.equals(this.userId, beneficiary.userId) &&
        Objects.equals(this.nickName, beneficiary.nickName) &&
        Objects.equals(this.name, beneficiary.name) &&
        Objects.equals(this.address, beneficiary.address) &&
        Objects.equals(this.iban, beneficiary.iban) &&
        Objects.equals(this.bic, beneficiary.bic) &&
        Objects.equals(this.sepaCreditorIdentifier, beneficiary.sepaCreditorIdentifier) &&
        Objects.equals(this.sddB2bWhitelist, beneficiary.sddB2bWhitelist) &&
        Objects.equals(this.sddCoreBlacklist, beneficiary.sddCoreBlacklist) &&
        Objects.equals(this.usableForSct, beneficiary.usableForSct) &&
        Objects.equals(this.sddCoreKnownUniqueMandateReference, beneficiary.sddCoreKnownUniqueMandateReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, userId, nickName, name, address, iban, bic, sepaCreditorIdentifier, sddB2bWhitelist, sddCoreBlacklist, usableForSct, sddCoreKnownUniqueMandateReference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreezorBeneficiary {\n");
    
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("    sepaCreditorIdentifier: ").append(toIndentedString(sepaCreditorIdentifier)).append("\n");
    sb.append("    sddB2bWhitelist: ").append(toIndentedString(sddB2bWhitelist)).append("\n");
    sb.append("    sddCoreBlacklist: ").append(toIndentedString(sddCoreBlacklist)).append("\n");
    sb.append("    usableForSct: ").append(toIndentedString(usableForSct)).append("\n");
    sb.append("    sddCoreKnownUniqueMandateReference: ").append(toIndentedString(sddCoreKnownUniqueMandateReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

