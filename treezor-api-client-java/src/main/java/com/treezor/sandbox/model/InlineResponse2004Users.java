/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.treezor.sandbox.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse2004Users
 */

public class InlineResponse2004Users {
  @SerializedName("firstname")
  private String firstname = null;

  @SerializedName("lastname")
  private String lastname = null;

  @SerializedName("fullnames")
  private String fullnames = null;

  @SerializedName("birthday")
  private String birthday = null;

  /**
   * Representative&#39;s position in company
   */
  @JsonAdapter(ParentTypeEnum.Adapter.class)
  public enum ParentTypeEnum {
    HONORARY_PRESIDENT("Honorary president"),
    
    NOT_ASSOCIATED_MANAGER("Not associated manager"),
    
    PRESIDENT_OF_THE_CONTROL_COUNCIL("President of the control council"),
    
    MEMBER_OF_THE_MANAGEMENT_BOARD("Member of the management board"),
    
    MEMBER_OF_THE_SUPERVISORY_COUNCIL("Member of the supervisory council"),
    
    MEMBER_OF_THE_CONTROL_COMMITTEE("Member of the control committee"),
    
    PARTNER("Partner"),
    
    MANAGEMENT_ADVISOR_("Management advisor "),
    
    DEPUTY_MANAGING_DIRECTOR("Deputy managing director"),
    
    VICE_PRESIDENT_OF_THE_MANAGEMENT_BOARD("Vice-president of the management board"),
    
    VICE_PRESIDENT_OF_THE_SUPERVISORY_COUNCIL("Vice-president of the supervisory council"),
    
    DEVELOPER("Developer"),
    
    OTHER_MANAGER("Other manager"),
    
    RECEIVER("Receiver"),
    
    AUTHORIZED_AGENT("Authorized agent"),
    
    PERSON_IN_CHARGE_ABROAD("Person in charge abroad"),
    
    REPRESENTATIVE_IN_FRANCE("Representative in France"),
    
    MEMBER_OF_THE_MANAGEMENT_COUNCIL("Member of the management council"),
    
    MEMBER_OF_THE_CONTROL_COUNCIL("Member of the control council"),
    
    TREASURER("Treasurer"),
    
    SECRETARY("Secretary"),
    
    MEMBER("Member"),
    
    ADMINISTRATIVE_DIRECTOR("Administrative director"),
    
    SALES_DIRECTOR("Sales director"),
    
    FINANCIAL_DIRECTOR("Financial director"),
    
    CHIEF_TECHNICAL_OFFICER("Chief Technical Officer"),
    
    GENERAL_SECRETARY("General secretary"),
    
    CHIEF_ACCOUNTANT("Chief accountant"),
    
    GUARDIAN("Guardian"),
    
    PLAN_COMMISSIONER_("Plan commissioner "),
    
    MANAGEMENT_AGENT("Management agent"),
    
    CONCORDAT_COMMISSIONER("Concordat commissioner"),
    
    REPRESENTATIVE_OF_THE_CREDITORS("Representative of the creditors"),
    
    JUDICIAL_REPRESENTATIVE("Judicial representative"),
    
    SUBSTITUTE_JUDGE_COMMISSIONER("Substitute judge-commissioner"),
    
    JUDGE_COMMISSIONER("Judge-commissioner"),
    
    RECEIVER_REPRESENTATIVE_OF_THE_CREDITORS("Receiver/representative of the creditors"),
    
    CONCILIATOR("Conciliator"),
    
    AUDITOR("Auditor"),
    
    STATUTORY_AUDITOR("Statutory auditor"),
    
    SUPERVISION_COMMISSIONER("Supervision commissioner"),
    
    DEPUTY_AUDITOR("Deputy auditor"),
    
    SPOUSE_ASSOCIATE("Spouse-associate"),
    
    ACCOUNTS_CONTROLLER("Accounts controller"),
    
    CENSOR("Censor"),
    
    CHIEF_EXECUTIVE_OFFICER("Chief Executive Officer"),
    
    PRESIDENT("President"),
    
    CHAIRMAN_OF_THE_BOARD("Chairman of the Board"),
    
    GOVERNOR("Governor"),
    
    DEPUTY_GOVERNOR("Deputy governor"),
    
    PERSON_HAVING_THE_POWER_TO_USUALLY_INVOLVE_THE_COMPANY("Person having the power to usually involve the company"),
    
    MANAGER("Manager"),
    
    CO_MANAGING_PARTNER("Co-managing partner"),
    
    MANAGING_DIRECTOR("Managing director"),
    
    MANAGING_DIRECTOR_NOT_ADMINISTRATOR("Managing director not administrator"),
    
    UNIQUE_MANAGING_DIRECTOR("Unique managing director"),
    
    DELEGATED_MANAGING_DIRECTOR("Delegated managing director"),
    
    VICE_PRESIDENT("Vice-president"),
    
    ADMINISTRATOR("Administrator"),
    
    DELEGATED_ADMINISTRATOR("Delegated administrator"),
    
    PRESIDENT_OF_THE_MANAGEMENT_BOARD("President of the management board"),
    
    PRESIDENT_OF_THE_SUPERVISORY_COUNCIL("President of the supervisory council"),
    
    ACTIVE_PARTNER("Active partner"),
    
    MANAGEMENT_CONTROLLER("Management controller"),
    
    LIQUIDATOR("Liquidator"),
    
    TEMPORARY_ADMINISTRATOR("Temporary administrator"),
    
    REPRESENTATIVE_IN_FRANCE_OF_A_FOREIGN_COMPANY("Representative in France of a foreign company"),
    
    PERSONAL_BUSINESS_MANAGER("Personal business manager");

    private String value;

    ParentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParentTypeEnum fromValue(String text) {
      for (ParentTypeEnum b : ParentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ParentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ParentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("parentType")
  private ParentTypeEnum parentType = null;

  public InlineResponse2004Users firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * Representative&#39;s first name.
   * @return firstname
  **/
  @ApiModelProperty(value = "Representative's first name.")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public InlineResponse2004Users lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * Representative&#39;s last name.
   * @return lastname
  **/
  @ApiModelProperty(value = "Representative's last name.")
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  public InlineResponse2004Users fullnames(String fullnames) {
    this.fullnames = fullnames;
    return this;
  }

   /**
   * Representative&#39;s full names.
   * @return fullnames
  **/
  @ApiModelProperty(value = "Representative's full names.")
  public String getFullnames() {
    return fullnames;
  }

  public void setFullnames(String fullnames) {
    this.fullnames = fullnames;
  }

  public InlineResponse2004Users birthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

   /**
   * Representative&#39;s birthdate. Format YYYY-MM-DD
   * @return birthday
  **/
  @ApiModelProperty(value = "Representative's birthdate. Format YYYY-MM-DD")
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }

  public InlineResponse2004Users parentType(ParentTypeEnum parentType) {
    this.parentType = parentType;
    return this;
  }

   /**
   * Representative&#39;s position in company
   * @return parentType
  **/
  @ApiModelProperty(value = "Representative's position in company")
  public ParentTypeEnum getParentType() {
    return parentType;
  }

  public void setParentType(ParentTypeEnum parentType) {
    this.parentType = parentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2004Users inlineResponse2004Users = (InlineResponse2004Users) o;
    return Objects.equals(this.firstname, inlineResponse2004Users.firstname) &&
        Objects.equals(this.lastname, inlineResponse2004Users.lastname) &&
        Objects.equals(this.fullnames, inlineResponse2004Users.fullnames) &&
        Objects.equals(this.birthday, inlineResponse2004Users.birthday) &&
        Objects.equals(this.parentType, inlineResponse2004Users.parentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstname, lastname, fullnames, birthday, parentType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2004Users {\n");
    
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    fullnames: ").append(toIndentedString(fullnames)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    parentType: ").append(toIndentedString(parentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

