/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;

/**
 * TreezorBeneficiariesSddB2bWhitelist
 */

public class TreezorBeneficiariesSddB2bWhitelist {
  @JsonProperty("uniqueMandateReference")
  private String uniqueMandateReference = null;

  @JsonProperty("isRecurrent")
  private Boolean isRecurrent = null;

  @JsonProperty("walletId")
  private BigDecimal walletId = null;

  public TreezorBeneficiariesSddB2bWhitelist uniqueMandateReference(String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
    return this;
  }

   /**
   * Unique Mandate Reference that unambiguiously identify a mandate signed between the user and the beneficiary
   * @return uniqueMandateReference
  **/
  @ApiModelProperty(required = true, value = "Unique Mandate Reference that unambiguiously identify a mandate signed between the user and the beneficiary")
  public String getUniqueMandateReference() {
    return uniqueMandateReference;
  }

  public void setUniqueMandateReference(String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
  }

  public TreezorBeneficiariesSddB2bWhitelist isRecurrent(Boolean isRecurrent) {
    this.isRecurrent = isRecurrent;
    return this;
  }

   /**
   * If mandate is a recuring payment, this field must be true.
   * @return isRecurrent
  **/
  @ApiModelProperty(required = true, value = "If mandate is a recuring payment, this field must be true.")
  public Boolean isIsRecurrent() {
    return isRecurrent;
  }

  public void setIsRecurrent(Boolean isRecurrent) {
    this.isRecurrent = isRecurrent;
  }

  public TreezorBeneficiariesSddB2bWhitelist walletId(BigDecimal walletId) {
    this.walletId = walletId;
    return this;
  }

   /**
   * If present, the Direct Debit will be accepted only if the targeted wallet is the wallet with the given walletId. Without this value, the SDD can target any wallets of the user. With the value specified, only the explicitely authorized wallet can be targeted by SDD.
   * @return walletId
  **/
  @ApiModelProperty(value = "If present, the Direct Debit will be accepted only if the targeted wallet is the wallet with the given walletId. Without this value, the SDD can target any wallets of the user. With the value specified, only the explicitely authorized wallet can be targeted by SDD.")
  public BigDecimal getWalletId() {
    return walletId;
  }

  public void setWalletId(BigDecimal walletId) {
    this.walletId = walletId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreezorBeneficiariesSddB2bWhitelist beneficiariesSddB2bWhitelist = (TreezorBeneficiariesSddB2bWhitelist) o;
    return Objects.equals(this.uniqueMandateReference, beneficiariesSddB2bWhitelist.uniqueMandateReference) &&
        Objects.equals(this.isRecurrent, beneficiariesSddB2bWhitelist.isRecurrent) &&
        Objects.equals(this.walletId, beneficiariesSddB2bWhitelist.walletId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniqueMandateReference, isRecurrent, walletId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreezorBeneficiariesSddB2bWhitelist {\n");
    
    sb.append("    uniqueMandateReference: ").append(toIndentedString(uniqueMandateReference)).append("\n");
    sb.append("    isRecurrent: ").append(toIndentedString(isRecurrent)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

