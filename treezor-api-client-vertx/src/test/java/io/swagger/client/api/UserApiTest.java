/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TreezorInlineResponse20026;
import io.swagger.client.model.TreezorInlineResponseDefault;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class UserApiTest {

    private UserApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new UserApiImpl();
    }
    
    /**
     * delete a user
     * Change user&#39;s status to **CANCELED**.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deleteUserTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String origin = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        api.deleteUser(id, origin, accessSignature, accessTag, accessUserId, accessUserIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * get an user
     * Get user&#39;s information for given user&#39;s id.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getUserTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        api.getUser(id, accessSignature, accessTag, accessUserId, accessUserIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * search users
     * Get users from the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getUsersTest(TestContext context) {
        Async async = context.async();
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer userId = null;
        Integer userTypeId = null;
        String userStatus = null;
        String userTag = null;
        Integer specifiedUSPerson = null;
        Integer controllingPersonType = null;
        Integer employeeType = null;
        String email = null;
        String name = null;
        String legalName = null;
        String parentUserId = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        api.getUsers(accessSignature, accessTag, accessUserId, accessUserIp, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * update a user
     * Update user&#39;s information.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void putUserTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String userTag = null;
        Integer specifiedUSPerson = null;
        Integer controllingPersonType = null;
        Integer employeeType = null;
        String title = null;
        String firstname = null;
        String lastname = null;
        String middleNames = null;
        String birthday = null;
        String email = null;
        String address1 = null;
        String address2 = null;
        String postcode = null;
        String city = null;
        String state = null;
        String country = null;
        String phone = null;
        String mobile = null;
        String nationality = null;
        String nationalityOther = null;
        String placeOfBirth = null;
        String birthCountry = null;
        String occupation = null;
        String incomeRange = null;
        String legalName = null;
        String legalRegistrationNumber = null;
        String legalTvaNumber = null;
        LocalDate legalRegistrationDate = null;
        String legalForm = null;
        Integer legalShareCapital = null;
        String legalSector = null;
        String legalAnnualTurnOver = null;
        String legalNetIncomeRange = null;
        String legalNumberOfEmployeeRange = null;
        Integer effectiveBeneficiary = null;
        String language = null;
        String taxNumber = null;
        String taxResidence = null;
        String position = null;
        String personalAssets = null;
        api.putUser(id, accessSignature, accessTag, accessUserId, accessUserIp, userTag, specifiedUSPerson, controllingPersonType, employeeType, title, firstname, lastname, middleNames, birthday, email, address1, address2, postcode, city, state, country, phone, mobile, nationality, nationalityOther, placeOfBirth, birthCountry, occupation, incomeRange, legalName, legalRegistrationNumber, legalTvaNumber, legalRegistrationDate, legalForm, legalShareCapital, legalSector, legalAnnualTurnOver, legalNetIncomeRange, legalNumberOfEmployeeRange, effectiveBeneficiary, language, taxNumber, taxResidence, position, personalAssets, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * create user
     * Create a new user in the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void putUsersTest(TestContext context) {
        Async async = context.async();
        Integer specifiedUSPerson = null;
        String email = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer userTypeId = null;
        String userTag = null;
        Integer parentUserId = null;
        String parentType = null;
        Integer controllingPersonType = null;
        Integer employeeType = null;
        Integer entityType = null;
        String title = null;
        String firstname = null;
        String lastname = null;
        String middleNames = null;
        String birthday = null;
        String address1 = null;
        String address2 = null;
        String postcode = null;
        String city = null;
        String state = null;
        String country = null;
        String phone = null;
        String mobile = null;
        String nationality = null;
        String nationalityOther = null;
        String placeOfBirth = null;
        String birthCountry = null;
        String occupation = null;
        String incomeRange = null;
        String legalName = null;
        String legalRegistrationNumber = null;
        String legalTvaNumber = null;
        LocalDate legalRegistrationDate = null;
        String legalForm = null;
        Integer legalShareCapital = null;
        String legalSector = null;
        String legalAnnualTurnOver = null;
        String legalNetIncomeRange = null;
        String legalNumberOfEmployeeRange = null;
        Integer effectiveBeneficiary = null;
        String language = null;
        String taxNumber = null;
        String taxResidence = null;
        String position = null;
        String personalAssets = null;
        api.putUsers(specifiedUSPerson, email, accessSignature, accessTag, accessUserId, accessUserIp, userTypeId, userTag, parentUserId, parentType, controllingPersonType, employeeType, entityType, title, firstname, lastname, middleNames, birthday, address1, address2, postcode, city, state, country, phone, mobile, nationality, nationalityOther, placeOfBirth, birthCountry, occupation, incomeRange, legalName, legalRegistrationNumber, legalTvaNumber, legalRegistrationDate, legalForm, legalShareCapital, legalSector, legalAnnualTurnOver, legalNetIncomeRange, legalNumberOfEmployeeRange, effectiveBeneficiary, language, taxNumber, taxResidence, position, personalAssets, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * review user information
     * Perform a KYC review for given user.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void usersIdKycreviewPutTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String accessToken = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        api.usersIdKycreviewPut(id, accessToken, accessSignature, accessTag, accessUserId, accessUserIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}