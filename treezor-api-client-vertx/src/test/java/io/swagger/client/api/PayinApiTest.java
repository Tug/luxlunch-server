/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TreezorInlineResponse20017;
import io.swagger.client.model.TreezorInlineResponseDefault;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayinApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class PayinApiTest {

    private PayinApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new PayinApiImpl();
    }
    
    /**
     * delete a pay in
     * Deactivate a payin in the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deletePayinTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.deletePayin(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * get a pay in
     * Get a payin from the system by its id.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getPayinTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.getPayin(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * search pay ins
     * Get payins that match search criteria.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getPayinsTest(TestContext context) {
        Async async = context.async();
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        Integer accessUserIP = null;
        Integer payinId = null;
        Integer walletId = null;
        String payinTag = null;
        String payinStatus = null;
        Integer userId = null;
        String userName = null;
        String userEmail = null;
        Integer beneficiaryUserId = null;
        String eventAlias = null;
        Integer walletTypeId = null;
        String paymentMethodId = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        api.getPayins(accessSignature, accessTag, accessUserId, accessUserIP, payinId, walletId, payinTag, payinStatus, userId, userName, userEmail, beneficiaryUserId, eventAlias, walletTypeId, paymentMethodId, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * create a pay in
     * Create a new pay in in the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void postPayinTest(TestContext context) {
        Async async = context.async();
        Integer walletId = null;
        Integer userId = null;
        Integer paymentMethodId = null;
        Float amount = null;
        String currency = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String payinTag = null;
        Integer oneclickcardId = null;
        String paymentAcceptedUrl = null;
        String paymentWaitingUrl = null;
        String paymentRefusedUrl = null;
        String paymentCanceledUrl = null;
        String paymentExceptionUrl = null;
        Float distributorFee = null;
        String messageToUser = null;
        String language = null;
        String createdIp = null;
        String payinDate = null;
        Integer mandateId = null;
        api.postPayin(walletId, userId, paymentMethodId, amount, currency, accessSignature, accessTag, accessUserId, accessUserIp, payinTag, oneclickcardId, paymentAcceptedUrl, paymentWaitingUrl, paymentRefusedUrl, paymentCanceledUrl, paymentExceptionUrl, distributorFee, messageToUser, language, createdIp, payinDate, mandateId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}