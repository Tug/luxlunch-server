/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.TreezorInlineResponse20014;
import io.swagger.client.model.TreezorInlineResponseDefault;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MandateApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class MandateApiTest {

    private MandateApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new MandateApiImpl();
    }
    
    /**
     * revoke a mandate
     * Change mandate&#39;s status to canceled.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deleteMandateTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String origin = null;
        api.deleteMandate(id, origin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * get mandate
     * Get a mandate from the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getMandateTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.getMandate(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * search mandates
     * Get mandates that match search criteria.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getMandatesTest(TestContext context) {
        Async async = context.async();
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer mandateId = null;
        Integer userId = null;
        String uniqueMandateReference = null;
        String mandateStatus = null;
        String filter = null;
        api.getMandates(accessSignature, accessTag, accessUserId, accessUserIp, mandateId, userId, uniqueMandateReference, mandateStatus, filter, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * send an OTP
     * Send an OTP to sign a specific mandate. The OTP will be sent to the user&#39;s mobile phone OR to a specific mobile phone number in the request. 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mandatesIdResendOtpPutTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String accessToken = null;
        String accessSignature = null;
        Integer userId = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String debtorMobile = null;
        api.mandatesIdResendOtpPut(id, accessToken, accessSignature, userId, accessTag, accessUserId, accessUserIp, debtorMobile, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * sign a mandate
     * Sign a mandate with the received OTP.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mandatesIdSignPutTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String accessToken = null;
        String accessSignature = null;
        Integer userId = null;
        String otp = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String debtorSignatureIp = null;
        api.mandatesIdSignPut(id, accessToken, accessSignature, userId, otp, accessTag, accessUserId, accessUserIp, debtorSignatureIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * create a mandate
     * Create a new mandate in the system. 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void postMandatesTest(TestContext context) {
        Async async = context.async();
        String sddType = null;
        Boolean isPaper = null;
        String userId = null;
        String debtorName = null;
        String debtorAddress = null;
        String debtorCity = null;
        String debtorZipCode = null;
        String debtorCountry = null;
        String debtorIban = null;
        String sequenceType = null;
        String createdIp = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String debtorBic = null;
        String signatureDate = null;
        api.postMandates(sddType, isPaper, userId, debtorName, debtorAddress, debtorCity, debtorZipCode, debtorCountry, debtorIban, sequenceType, createdIp, accessSignature, accessTag, accessUserId, accessUserIp, debtorBic, signatureDate, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}