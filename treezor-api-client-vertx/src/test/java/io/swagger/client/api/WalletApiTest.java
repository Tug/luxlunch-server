/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TreezorInlineResponse20028;
import io.swagger.client.model.TreezorInlineResponseDefault;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class WalletApiTest {

    private WalletApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new WalletApiImpl();
    }
    
    /**
     * delete a wallet
     * Change wallet&#39;s status to **CANCELED**.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deleteWalletTest(TestContext context) {
        Async async = context.async();
        Integer id = null;
        String origin = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        api.deleteWallet(id, origin, accessSignature, accessTag, accessUserId, accessUserIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * get a wallet
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getWalletTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        api.getWallet(id, accessSignature, accessTag, accessUserId, accessUserIp, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * search wallets
     * Get wallets from the system that match the search criteria. The request must contains at least one of those inputs :walletId eventAlias, userId, walletTypeId, walletTag
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getWalletsTest(TestContext context) {
        Async async = context.async();
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        Integer accessUserIP = null;
        Integer walletId = null;
        String walletStatus = null;
        Integer userId = null;
        Integer parentUserId = null;
        String walletTag = null;
        Integer walletTypeId = null;
        String eventAlias = null;
        OffsetDateTime eventPayinStartDate = null;
        OffsetDateTime eventPayinEndDate = null;
        Integer tariffId = null;
        Integer payinCount = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        api.getWallets(accessSignature, accessTag, accessUserId, accessUserIP, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, eventPayinStartDate, eventPayinEndDate, tariffId, payinCount, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * create a wallet
     * Create a new wallet in the system..
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void postWalletsTest(TestContext context) {
        Async async = context.async();
        Integer walletTypeId = null;
        Integer tariffId = null;
        Integer userId = null;
        String currency = null;
        String eventName = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        Integer accessUserIP = null;
        Integer jointUserId = null;
        String walletTag = null;
        String eventAlias = null;
        LocalDate eventDate = null;
        String eventMessage = null;
        LocalDate eventPayinStartDate = null;
        LocalDate eventPayinEndDate = null;
        api.postWallets(walletTypeId, tariffId, userId, currency, eventName, accessSignature, accessTag, accessUserId, accessUserIP, jointUserId, walletTag, eventAlias, eventDate, eventMessage, eventPayinStartDate, eventPayinEndDate, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * update a wallet
     * Modifiy wallet information
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void putWalletTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        String walletTypeId = null;
        String eventName = null;
        String eventAlias = null;
        String eventDate = null;
        String eventMessage = null;
        String eventPayinStartDate = null;
        String eventPayinEndDate = null;
        String urlImage = null;
        String imageName = null;
        String tariffId = null;
        api.putWallet(id, accessSignature, accessTag, accessUserId, accessUserIp, walletTypeId, eventName, eventAlias, eventDate, eventMessage, eventPayinStartDate, eventPayinEndDate, urlImage, imageName, tariffId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}