/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TreezorInlineResponse20012;
import io.swagger.client.model.TreezorInlineResponseDefault;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class DocumentApiTest {

    private DocumentApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new DocumentApiImpl();
    }
    
    /**
     * create a document
     * Search for documents.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void createDocumentsTest(TestContext context) {
        Async async = context.async();
        String userId = null;
        Integer documentTypeId = null;
        String name = null;
        byte[] fileContentBase64 = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer documentTag = null;
        Long residenceId = null;
        api.createDocuments(userId, documentTypeId, name, fileContentBase64, accessSignature, accessTag, accessUserId, accessUserIp, documentTag, residenceId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * delete document
     * Remove a document from the system.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deleteDocumentTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.deleteDocument(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * get a document
     * get a document
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getDocumentTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.getDocument(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * search documents
     * Search for documents.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getDocumentsTest(TestContext context) {
        Async async = context.async();
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer documentId = null;
        String documentTag = null;
        String documentStatus = null;
        Integer documentTypeId = null;
        String documentType = null;
        Integer userId = null;
        String userName = null;
        String userEmail = null;
        String fileName = null;
        Integer fileSize = null;
        Integer fileType = null;
        String isAgent = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        api.getDocuments(accessSignature, accessTag, accessUserId, accessUserIp, documentId, documentTag, documentStatus, documentTypeId, documentType, userId, userName, userEmail, fileName, fileSize, fileType, isAgent, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * update a document
     * Update a document.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void putDocumentTest(TestContext context) {
        Async async = context.async();
        Long id = null;
        api.putDocument(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}